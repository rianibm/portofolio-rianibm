---
import type { CollectionEntry } from "astro:content";
import BaseHead from "@/components/BaseHead.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import FormattedDate from "@/components/FormattedDate.astro";
import { Icon } from "astro-icon/components";

type Props = CollectionEntry<"blog">["data"] & {
  pageSkills?: Array<{
    category: string;
    icon: string;
    skills: string[];
  }>;
};

const {
  title = "",
  description,
  pubDate,
  updatedDate,
  heroImage = "/fran.jpg",
  icon,
  tags,
  pageSkills,
} = Astro.props;

// Import collections and images
import { getCollection } from "astro:content";
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';

const posts = (await getCollection("blog")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

const bgClasses = [
  "hover:shadow-ppinkHover",
  "hover:shadow-pgreenHover",
  "hover:shadow-pblueHover",
  "hover:shadow-pyellow",
];

const skillBgClasses = [
  "bg-pgreen rounded-full",
  "bg-pblue rounded-2xl",
  "bg-ppink",
  "bg-pyellow rounded-md",
];

const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}')
if (!images[heroImage]) throw new Error(`"${heroImage}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`);

const getRandomClass = () => {
  return bgClasses[Math.floor(Math.random() * bgClasses.length)];
};

const getRandomSkillClass = () => {
  return skillBgClasses[Math.floor(Math.random() * skillBgClasses.length)];
};

// Function to get skills based on tags or page content
const getPageRelevantSkills = () => {
  if (pageSkills) return pageSkills;
  
  // Default skills based on common tags - using safe icons
  const tagToSkillsMap: Record<string, any> = {
    'react': {
      category: "React Ecosystem",
      icon: "1", // using number icons as safe fallback
      skills: ["React", "Next.js", "React Router", "Redux", "React Hooks", "JSX"]
    },
    'laravel': {
      category: "Laravel Development", 
      icon: "2",
      skills: ["Laravel", "PHP", "Eloquent ORM", "Blade Templates", "Artisan", "Composer"]
    },
    'frontend': {
      category: "Frontend Technologies",
      icon: "3",
      skills: ["HTML5", "CSS3", "JavaScript ES6+", "TypeScript", "Responsive Design"]
    },
    'ui/ux': {
      category: "Design & UX",
      icon: "4",
      skills: ["Figma", "Adobe XD", "User Research", "Prototyping", "Wireframing", "Design Systems"]
    },
    'tailwind': {
      category: "CSS Frameworks",
      icon: "5",
      skills: ["Tailwind CSS", "Bootstrap", "Sass/SCSS", "PostCSS", "CSS Grid", "Flexbox"]
    },
    'frontend developer': {
      category: "Frontend Development",
      icon: "1",
      skills: ["React", "Vue.js", "Angular", "JavaScript", "TypeScript", "Web APIs"]
    },
    'tailwind css': {
      category: "CSS Frameworks",
      icon: "5", 
      skills: ["Tailwind CSS", "Utility-First CSS", "Responsive Design", "Component Styling"]
    }
  };

  // Generate skills based on tags
  const relevantSkills = [];
  
  if (tags && Array.isArray(tags)) {
    for (const tag of tags) {
      const normalizedTag = tag.toLowerCase().replace(/\s+/g, '').replace('/', '');
      if (tagToSkillsMap[normalizedTag]) {
        relevantSkills.push(tagToSkillsMap[normalizedTag]);
      }
    }
  }

  // Add some general skills if no specific ones found
  if (relevantSkills.length === 0) {
    relevantSkills.push(
      {
        category: "Core Technologies",
        icon: "1",
        skills: ["JavaScript", "HTML5", "CSS3", "Git", "VS Code"]
      },
      {
        category: "Development Tools",
        icon: "2", 
        skills: ["NPM", "Webpack", "Babel", "ESLint", "Prettier"]
      }
    );
  }

  return relevantSkills;
};

const relevantSkills = getPageRelevantSkills();
---

<html lang="en">
    <head>
    <BaseHead title={title} description={description} />

    <!-- SEO -->
    <meta name="keywords" content="Rianibm, Riani BM, UX Engineer, Frontend Developer, Portfolio, React, Laravel, Tailwind, UI/UX" />
    <meta name="author" content="Rianibm" />
    <meta name="google-site-verification" content="RCc1MVKPhX5dC6D2cAtvSUNTKVPZemBb-O5jEo7czuY" />

    <!-- Open Graph / Facebook -->
    <meta property="og:title" content={title ? `${title} | Rianibm` : "Rianibm - UX Engineer & Frontend Developer"} />
    <meta property="og:description" content={description ?? "Portofolio of Rianibm. UX Engineer & Frontend Developer based in Jakarta, Indonesia."} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://rianibm.com/" />
    <meta property="og:image" content="https://rianibm.com/thumbnail.jpg" />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title ? `${title} | Rianibm` : "Rianibm - UX Engineer & Frontend Developer"} />
    <meta name="twitter:description" content={description ?? "Portofolio resmi Rianibm. UX Engineer & Frontend Developer dari Indonesia."} />
    <meta name="twitter:image" content="https://rianibm.com/thumbnail.jpg" />

    <!-- Schema.org JSON-LD (Google Rich Results) -->
    <script type="application/ld+json">
      {JSON.stringify({
        "@context": "https://schema.org",
        "@type": "Person",
        "name": "Riani BM",
        "alternateName": "Rianibm",
        "url": "https://rianibm.com",
        "jobTitle": "UX Engineer & Frontend Developer",
        "sameAs": [
          "https://www.linkedin.com/in/rianibm",
          "https://github.com/rianibm"
        ]
      })}
    </script>
  </head>
  <body>
    <Header />
    <main class="container mx-auto md:px-10 text-white">
      <article>
        <div class="relative mb-20" transition:animate="fade">
          <span class="bg-black bg-opacity-25 w-full h-full absolute"></span>
          <div class="absolute bottom-10 md:left-20 left-6">
            <h1 class="text-4xl md:text-8xl font-semibold text-shadow">
              <span class="font-kablamo text-ppink">{title.charAt(0)}</span>{
                title.slice(1)
              }
            </h1>
            <p set:html={description} />
          </div>
          <Image src={images[heroImage]()} alt={title} class="h-96 w-full object-cover"/>
        </div>
        <div class="text-black px-6 md:px-0">
          <div class="">
            <div class="text-sm text-pblack flex items-center justify-between">
              <FormattedDate date={pubDate} />
              {
                updatedDate && (
                  <div class="last-updated-on">
                    Last updated on <FormattedDate date={updatedDate} />
                  </div>
                )
              }
              <Icon name={icon} class="text-5xl" transition:animate="fade" />
            </div>
            <hr />
          </div>
          <div class="flex justify-between py-10 md:flex-row flex-col">
            <div class="prose md:w-3/4 flex flex-col gap-6">
              <slot />
            </div>
            <div class="flex flex-col gap-6" transition:animate="slide">
              <!-- Related Skills Section -->
              <div class="flex flex-col gap-4 pt-10 md:pt-0">
                <p class="md:hidden font-semibold">Related Skills:</p>
                <h3 class="hidden md:block text-lg font-semibold mb-2">Technologies Used</h3>
                <div class="flex flex-col gap-3">
                  {relevantSkills.map((skillGroup) => {
                    const randomClass = getRandomSkillClass();
                    return (
                      <div class="border border-black rounded-lg p-3 shadow-card hover:shadow-hover transition-all duration-200">
                        <div class="flex items-center gap-2 mb-2">
                          <div class={`${randomClass} p-1 border border-black shadow-card1 text-sm`}>
                            <Icon name={skillGroup.icon} />
                          </div>
                          <h4 class="font-semibold text-sm">{skillGroup.category}</h4>
                        </div>
                        <div class="flex flex-wrap gap-1">
                          {skillGroup.skills.map((skill) => (
                            <span class="px-2 py-1 bg-gray-100 text-gray-700 rounded-full text-xs border border-gray-300">
                              {skill}
                            </span>
                          ))}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>      
              
              <hr />
              
              <!-- Related Posts (smaller section) -->
              <div class="flex flex-col gap-2">
                <p class="font-semibold text-sm">More Posts:</p>
                <ul class="flex flex-col gap-1">
                  {
                    posts.slice(0, 3).map((post) => {
                      return (
                        <li class={`text-left rounded-md border-1 border-black shadow-card group hover:shadow-hover transition px-2 py-1 text-sm ${getRandomClass()}`}>
                          <a href={`/blog/${post.id}/`}>
                            <h5 class="text-xs font-medium">{post.data.title}</h5>
                          </a>
                        </li>
                      );
                    })
                  }
                </ul>
              </div>
              
              <hr />
              <p>Portfolio of</p>
              <div class="flex -mt-4 gap-2">
                <div class="bg-pgreen rounded-full w-12 h-12 aspect-square object-contain overflow-hidden">
                  <Image src={images["/src/assets/rianibm-removebg-preview.png"]()} alt="Riani BM" />
                </div>
                <div>
                  <h3>Riani BM</h3>
                  <p class="text-pblack">Frontend Developer<br>from Indonesia</p>
                </div>
              </div>
              <hr/>
              <div>
                <p>Links:</p>
                <div class="flex items-center gap-6 text-xl">
                  <a
                    href="mailto:rianimatialu@gmail.com"
                    target="_blank"
                    class="py-1 pl-3 rounded-md border-1 border-black bg-ppink shadow-card hover:shadow-hover transition"
                  >
                    <Icon name="web" />
                  </a>
                  <a
                    href="https://github.com/rianibm"
                    target="_blank"
                    class="border-1 p-1 border-black rounded-full bg-pblue shadow-card hover:shadow-hover transition"
                  >
                    <Icon name="github" />
                  </a>
                  <a
                    href="https://www.linkedin.com/in/rianibm/"
                    target="_blank"
                    class="border-1 p-1 border-black rounded-full bg-pgreen shadow-card hover:shadow-hover transition"
                  >
                    <Icon name="linkedin" />
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </article>
    </main>
    <Footer />
  </body>
</html>